# Importa la librer√≠a Flet para construir la interfaz gr√°fica.
import flet as ft

# Clase principal de la pantalla de registro de usuarios.
class RegisterApp:
    # Constructor de la clase.
    def __init__(self, page: ft.Page):
        self.page = page  # Guarda la referencia de la p√°gina.
        self.show_password = False  # Controla si la contrase√±a principal es visible.
        self.show_confirm_password = False  # Controla si la confirmaci√≥n de contrase√±a es visible.
        self.build()  # Construye la interfaz.

    # M√©todo que arma toda la interfaz gr√°fica de la pantalla de registro.
    def build(self):
        # Campo de texto para el nombre completo.
        self.name = ft.TextField(
            label="Nombre Completo", width=300, height=50, dense=True
        )

        # Campo de texto para el correo electr√≥nico.
        self.email = ft.TextField(
            label="Correo Electr√≥nico", width=300, height=50, dense=True
        )

        # Campo de texto para el nombre de usuario.
        self.username = ft.TextField(
            label="Usuario", width=300, height=50, dense=True
        )

        # Campo de texto para la contrase√±a.
        self.password = ft.TextField(
            label="Contrase√±a",
            password=True,  # Oculta el texto inicialmente.
            width=300,
            height=50,
            dense=True,
            suffix=ft.IconButton(  # Bot√≥n para alternar visibilidad.
                icon=ft.icons.VISIBILITY_OFF,
                on_click=self.toggle_password,
            ),
        )

        # Campo de texto para confirmar la contrase√±a.
        self.confirm_password = ft.TextField(
            label="Confirmar Contrase√±a",
            password=True,  # Oculta el texto inicialmente.
            width=300,
            height=50,
            dense=True,
            suffix=ft.IconButton(  # Bot√≥n para alternar visibilidad.
                icon=ft.icons.VISIBILITY_OFF,
                on_click=self.toggle_confirm_password,
            ),
        )

        # Bot√≥n para registrar una nueva cuenta.
        register_button = ft.ElevatedButton(
            "Crear Cuenta",
            bgcolor="#43D9A2",  # Color verde aguamarina para el bot√≥n.
            color="#FFFFFF",    # Texto blanco.
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=20),  # Bordes redondeados.
                elevation=5,  # Sombra ligera para dar efecto flotante.
            ),
            width=220,
            height=45,
            on_click=self.register  # Acci√≥n al hacer clic: registrar usuario.
        )

        # Bot√≥n para volver al login.
        back_button = ft.TextButton(
            "Volver al Login", on_click=self.back_to_login
        )

        # Limpia cualquier contenido previo en la p√°gina.
        self.page.controls.clear()

        # Agrega todos los controles a la p√°gina organizados en una columna.
        self.page.add(
            ft.Column([
                ft.Text("Crear Cuenta", size=36, weight="bold", text_align="center"),  # T√≠tulo principal.
                ft.Container(height=20),  # Espaciador.
                self.name,  # Campo Nombre.
                self.email,  # Campo Correo.
                self.username,  # Campo Usuario.
                self.password,  # Campo Contrase√±a.
                self.confirm_password,  # Campo Confirmar Contrase√±a.
                ft.Container(height=20),  # Espaciador antes del bot√≥n.
                register_button,  # Bot√≥n para crear la cuenta.
                ft.Container(height=10),  # Espaciador peque√±o.
                back_button,  # Bot√≥n para volver al login.
            ],
            alignment=ft.MainAxisAlignment.CENTER,  # Centrado vertical.
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,  # Centrado horizontal.
            spacing=15)  # Espaciado entre elementos.
        )
        self.page.update()  # Actualiza la p√°gina para mostrar los cambios.

    # M√©todo para alternar la visibilidad del campo de contrase√±a principal.
    def toggle_password(self, e):
        self.show_password = not self.show_password  # Cambia el estado de visibilidad.
        self.password.password = not self.show_password  # Actualiza el campo.
        self.password.suffix.icon = (
            ft.icons.VISIBILITY if self.show_password else ft.icons.VISIBILITY_OFF
        )  # Cambia el √≠cono del bot√≥n.
        self.page.update()  # Refresca la p√°gina.

    # M√©todo para alternar la visibilidad del campo de confirmar contrase√±a.
    def toggle_confirm_password(self, e):
        self.show_confirm_password = not self.show_confirm_password  # Cambia el estado de visibilidad.
        self.confirm_password.password = not self.show_confirm_password  # Actualiza el campo.
        self.confirm_password.suffix.icon = (
            ft.icons.VISIBILITY if self.show_confirm_password else ft.icons.VISIBILITY_OFF
        )  # Cambia el √≠cono del bot√≥n.
        self.page.update()  # Refresca la p√°gina.

    # M√©todo que procesa el registro del usuario.
    def register(self, e):
        # Verifica que todos los campos est√©n llenos.
        if not all([
            self.name.value,
            self.email.value,
            self.username.value,
            self.password.value,
            self.confirm_password.value
        ]):
            # Muestra un mensaje de error si falta alg√∫n campo.
            self.page.snack_bar = ft.SnackBar(ft.Text("Completa todos los campos."), bgcolor="red")
            self.page.snack_bar.open = True
            self.page.update()
            return

        # Verifica que las contrase√±as coincidan.
        if self.password.value != self.confirm_password.value:
            # Muestra un mensaje de error si las contrase√±as no coinciden.
            self.page.snack_bar = ft.SnackBar(ft.Text("Las contrase√±as no coinciden."), bgcolor="red")
            self.page.snack_bar.open = True
            self.page.update()
            return

        # Si todo es correcto, muestra mensaje de √©xito.
        self.page.snack_bar = ft.SnackBar(ft.Text("¬°Cuenta creada exitosamente! üéâ"), bgcolor="green")
        self.page.snack_bar.open = True
        self.page.update()

    # M√©todo que regresa a la pantalla de login.
    def back_to_login(self, e):
        from LoginApp import LoginApp  # Importa din√°micamente la pantalla de login.
        self.page.controls.clear()  # Limpia la p√°gina.
        LoginApp(self.page)  # Carga la clase LoginApp.
